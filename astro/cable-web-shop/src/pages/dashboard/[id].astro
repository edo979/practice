---
import Product from '../../components/dashboard/Product'
import { isValidUser } from '../../firebase/utility/auth'
import { ProductT, productsRef } from '../../firebase/utility/firestore'
import { bucket } from '../../firebase/utility/storage'
import Layout from '../../layouts/MainLayout.astro'
import {
  validateProductDesc,
  validateProductImage,
  validateProductName,
  validateProductPrice,
} from '../../utils/newProductFormValidators'
import type { ActionDataT } from './index.astro'

const actionData: ActionDataT = {}

// PROTECT route
if (!(await isValidUser(Astro.cookies.get('session').value))) {
  return Astro.redirect('/login')
}

async function deleteImageFromStore(imageUrl: string) {
  const imageName = imageUrl.split('/').pop()?.replace('%2F', '/')
  if (imageName) {
    const file = bucket.file(imageName)

    const generationMatchNumber = new Date().getTime()
    Astro.request.headers.append(
      'x-goog-if-generation-match',
      generationMatchNumber.toString()
    )
    await file.delete({ ifGenerationMatch: generationMatchNumber })
  }
}

function badRequest() {
  return new Response(JSON.stringify({ formError: 'Form submited wrong!' }), {
    status: 400,
  })
}

const id = Astro.params.id
if (!id) return badRequest()

const productRef = productsRef.doc(id)
const doc = await productRef.get()

if (Astro.request.method === 'PATCH') {
  try {
    const formData = await Astro.request.formData()
    const name = formData.get('name')
    const price = formData.get('price')
    const desc = formData.get('desc')
    const image = formData.get('product_image') as File

    actionData.fieldsError = {}
    // check for fields who has updated
    if (name !== null) {
      if (typeof name !== 'string') return badRequest()
      actionData.fieldsError.name = validateProductName(name)
    }
    if (desc !== null) {
      if (typeof desc !== 'string') return badRequest()
      actionData.fieldsError.desc = validateProductDesc(desc)
    }
    if (price !== null) {
      if (typeof price !== 'string') return badRequest()
      actionData.fieldsError.price = validateProductPrice(price)
    }
    if (image !== null) {
      actionData.fieldsError.image = validateProductImage(image)
    }

    if (Object.values(actionData.fieldsError).some(Boolean)) {
      return new Response(JSON.stringify(actionData), { status: 404 })
    }

    if (doc.exists) {
      const imageUrl: string | undefined = doc.data()?.imageUrl
      if (imageUrl) {
        try {
          await deleteImageFromStore(imageUrl)
          // continue to firestore
        } catch (error: any) {
          // if file not exist continue
          if (error.code !== 404) throw new Error('Error when deleting image.')
        }
      }
    }

    let imageUrl
    if (image) {
      const file = bucket.file(`products/${Date.now()}_${image.name}`)
      await file.save(Buffer.from(await image.arrayBuffer()))
      await file.makePublic()
      imageUrl = file.publicUrl()
    }

    const dataArray = [
      { name: 'name', data: name },
      { name: 'desc', data: desc },
      { name: 'price', data: price },
      { name: 'imageUrl', data: imageUrl },
    ].filter((field) => Boolean(field.data))
    const data = dataArray.reduce(
      (o, field) => Object.assign(o, { [field.name]: field.data }),
      {}
    )

    await productRef.update(data)
    return Astro.redirect('/dashboard')
  } catch (error) {
    if (error instanceof Error) Astro.response.status = 500
  }
}

// proces DELETE request
if (Astro.request.method === 'DELETE') {
  try {
    if (doc.exists) {
      // first try to delete image from storage
      const imageUrl: string | undefined = doc.data()?.imageUrl
      if (imageUrl) {
        try {
          await deleteImageFromStore(imageUrl)
          // continue to firestore
        } catch (error: any) {
          // if file not exist continue
          if (error.code !== 404) throw new Error('Error when deleting image.')
        }
      }
      // Delete product from db
      productRef.delete()
      return Astro.redirect('/dashboard')
    }

    throw new Error('Product not found in database!')
  } catch (error) {
    if (error instanceof Error) actionData.formError = error.message
  }
}

let product
if (Astro.request.method === 'GET') {
  try {
    if (doc.exists) {
      product = {
        ...doc.data(),
        created_at: doc.data()!.created_at.toDate(),
        id: doc.id,
      } as ProductT

      if (!product)
        throw new Error('Error when retriving product from database!')
    } else {
      throw new Error('No such product in database!')
    }
  } catch (error) {
    if (error instanceof Error) actionData.formError = error.message
  }
}
---

<Layout>
  {actionData.formError && <p>{actionData.formError}</p>}
  {product && <Product client:only product={product} actionData={actionData} />}
</Layout>
