---
import Product from '../../components/dashboard/Product'
import { isValidUser } from '../../firebase/utility/auth'
import { ProductT, productsRef } from '../../firebase/utility/firestore'
import { bucket } from '../../firebase/utility/storage'
import Layout from '../../layouts/MainLayout.astro'
import { validateProductImage } from '../../utils/newProductFormValidators'
import type { ActionDataT } from './index.astro'

// PROTECT route
if (!(await isValidUser(Astro.cookies.get('session').value))) {
  return Astro.redirect('/login')
}

const actionData: ActionDataT = {}

const id = Astro.params.id
if (!id) {
  actionData.formError = 'No product id si given!'
  return
}

if (Astro.request.method === 'PATCH') {
  try {
    const formData = await Astro.request.formData()
    const name = formData.get('name')
    const price = formData.get('price')
    const desc = formData.get('desc')
    const image = formData.get('product_image') as File

    const fieldsError = {
      image: validateProductImage(image),
    }
    const formFields = {}

    if (Object.values(fieldsError).some(Boolean)) {
      actionData.fieldsError = fieldsError
      actionData.fields = formFields
      throw new Error('Form fields have errors!')
    }
  } catch (error) {
    if (error instanceof Error) console.log(error.message)
  }
}

// proces DELETE request
if (Astro.request.method === 'DELETE') {
  try {
    const productRef = productsRef.doc(id)
    const doc = await productRef.get()

    if (doc.exists) {
      // Delete image from storage
      const imageUrl: string | undefined = doc.data()?.imageUrl
      if (imageUrl) {
        const imageName = imageUrl.split('/').pop()?.replace('%2F', '/')
        if (imageName) {
          const file = bucket.file(imageName)
          try {
            const generationMatchNumber = new Date().getTime()
            Astro.request.headers.append(
              'x-goog-if-generation-match',
              generationMatchNumber.toString()
            )
            await file.delete({ ifGenerationMatch: generationMatchNumber })
            // continue to firestore
          } catch (error: any) {
            // if file not exist continue
            if (error.code !== 404)
              throw new Error('Error when deleting image.')
          }
        }
      }

      // Delete product from db
      productRef.delete()
      return Astro.redirect('/dashboard')
    }

    throw new Error('Product not found in database!')
  } catch (error) {
    if (error instanceof Error) actionData.formError = error.message
  }
}

let product
if (Astro.request.method === 'GET') {
  try {
    const productRef = await productsRef.doc(id)
    const doc = await productRef.get()

    if (doc.exists) {
      product = {
        ...doc.data(),
        created_at: doc.data()!.created_at.toDate(),
        id: doc.id,
      } as ProductT

      if (!product)
        throw new Error('Error when retriving product from database!')
    } else {
      throw new Error('No such product in database!')
    }
  } catch (error) {
    if (error instanceof Error) actionData.formError = error.message
  }
}
---

<Layout>
  {
    actionData.formError ? (
      <p>{actionData.formError}</p>
    ) : (
      product && <Product client:only product={product} />
    )
  }
</Layout>
