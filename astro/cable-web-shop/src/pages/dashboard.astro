---
import Layout from '../layouts/MainLayout.astro'
import { app } from '../firebase/server'
import { getAuth } from 'firebase-admin/auth'
import { productsRef, ProductT } from '../firebase/utility/firestore'
import { FieldValue } from 'firebase-admin/firestore'
import { bucket } from '../firebase/utility/storage'

// Protect route
const auth = getAuth(app)
const sessionCookie = Astro.cookies.get('session').value
if (!sessionCookie) return Astro.redirect('/login')

let user = undefined
try {
  const decodedCookie = await auth.verifySessionCookie(sessionCookie)
  user = await auth.getUser(decodedCookie.uid)
} catch (error) {
  return Astro.redirect('/login')
}

// Process form and POST method
type ActionDataT = {
  formError?: string
  fields?: {
    name?: string
    price?: string
  }
  fieldsError?: {
    name?: string
    price?: string
  }
}

const validateProductName = (name: string) => {
  if (name.length < 3) return 'Name is to short!'
}
const validateProductPrice = (price: string) => {
  if (Number.isNaN(parseFloat(price)))
    return 'Please enter valid price in this format 34.44'
  if (parseFloat(price) <= 0) return 'Add valid price!'
}

const validateProductImage = (image: File) => {
  const allowedFileTypes = ['image/png', 'image/jpeg']

  if (image.size === 0) return 'No image selected.'
  if (!allowedFileTypes.includes(image.type))
    return 'Only png, jpg, jpeg images is alloved!'

  if (image.size > 1e6) return 'Max size of image is 1Mb!'
}

const actionData: ActionDataT = {}
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData()
    const name = formData.get('name')
    const price = formData.get('price')
    const image = formData.get('product_image') as File

    if (
      !name ||
      typeof name !== 'string' ||
      !price ||
      typeof price !== 'string'
    ) {
      actionData.formError = 'Form submitet wrong!'
      throw new Error('Form submited wrong!')
    }

    // save image
    const file = bucket.file(`products/${Date.now()}_${image.name}`)
    await file.save(Buffer.from(await image.arrayBuffer()))
    await file.makePublic()
    const imageUrl = file.publicUrl()

    // save to firestore
    const snapshot = await productsRef.where('name', '==', name).get()
    if (snapshot.empty) {
      await productsRef.doc().set({
        name,
        price,
        imageUrl,
        created_at: FieldValue.serverTimestamp(),
      })
    } else {
      actionData.formError = 'Product with same name allready exist!'
      throw new Error('Product name exist!')
    }
  } catch (error) {
    if (error instanceof Error) console.log(error.message)
  }
}

// Set products data (get request or refresh after post request)
let products
try {
  const snapshot = await productsRef
    .orderBy('created_at', 'desc')
    .limit(5)
    .get()

  products = snapshot.docs.map((doc) => ({
    name: doc.data().name,
    price: doc.data().price,
    created_at: doc.data().created_at,
    imageUrl: doc.data().imageUrl,
  })) as ProductT[]
} catch (error) {
  products = undefined
}
---

<Layout>
  <h1>Dashboard</h1>
  <p>Welcome {user?.displayName}</p>
  <form action="/api/auth/logout">
    <button type="submit">Logout</button>
  </form>

  <ul>
    {
      products ? (
        products.map((product) => (
          <li>
            <div>
              <h2>{product.name}</h2>
              <img src={product.imageUrl} alt={product.name} />
            </div>
          </li>
        ))
      ) : (
        <p>No products!</p>
      )
    }
  </ul>

  <h2>Add product</h2>
  <form method="post" enctype="multipart/form-data">
    {actionData.formError && <p>{actionData.formError}</p>}
    <label for="name">Name</label>
    <input type="text" name="name" id="name" />
    <label for="price">Price</label>
    <input type="number" name="price" id="price" />
    <label for="product_image" class="btn btn-secondary w-full"
      >Product Image</label
    >
    <input
      type="file"
      name="product_image"
      id="product_image"
      accept=".jpg, .jpeg, .png"
      class="hidden"
    />
    <button type="submit">Add new product</button>
  </form>
</Layout>
