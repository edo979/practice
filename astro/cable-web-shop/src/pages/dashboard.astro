---
import Layout from '../layouts/MainLayout.astro'
import { app } from '../firebase/server'
import { getAuth } from 'firebase-admin/auth'
import { productsRef, ProductT } from '../firebase/utility/firestore'
import { FieldValue } from 'firebase-admin/firestore'
import { bucket } from '../firebase/utility/storage'
import {
  validateProductImage,
  validateProductName,
  validateProductPrice,
} from '../utils/newProductFormValidators'

// Protect route
const auth = getAuth(app)
const sessionCookie = Astro.cookies.get('session').value
if (!sessionCookie) return Astro.redirect('/login')

let user = undefined
try {
  const decodedCookie = await auth.verifySessionCookie(sessionCookie)
  user = await auth.getUser(decodedCookie.uid)
} catch (error) {
  return Astro.redirect('/login')
}

// Process form and POST method
type ActionDataT = {
  formError?: string
  fields?: {
    name?: string
    price?: string
  }
  fieldsError?: {
    name?: string
    price?: string
    image?: string
  }
}

const actionData: ActionDataT = {}
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData()
    const name = formData.get('name')
    const price = formData.get('price')
    const image = formData.get('product_image') as File
    console.log(image)
    if (
      !name ||
      typeof name !== 'string' ||
      !price ||
      typeof price !== 'string'
    ) {
      actionData.formError = 'Form submitet wrong!'
      throw new Error('Form submited wrong!')
    }
    const formFields = { name, price }
    const fieldsError = {
      name: validateProductName(name),
      price: validateProductPrice(price),
      image: validateProductImage(image),
    }
    if (Object.values(fieldsError).some(Boolean)) {
      actionData.fieldsError = fieldsError
      actionData.fields = formFields
      throw new Error('Form fields have errors!')
    }

    // save image
    const file = bucket.file(`products/${Date.now()}_${image.name}`)
    await file.save(Buffer.from(await image.arrayBuffer()))
    await file.makePublic()
    const imageUrl = file.publicUrl()

    // save to firestore
    const snapshot = await productsRef.where('name', '==', name).get()
    if (snapshot.empty) {
      await productsRef.doc().set({
        name,
        price: parseFloat(price),
        imageUrl,
        created_at: FieldValue.serverTimestamp(),
      })
    } else {
      actionData.formError = 'Product with same name allready exist!'
      throw new Error('Product name exist!')
    }
  } catch (error) {
    if (error instanceof Error) console.log(error.message)
  }
}

// Set products data (get request or refresh after post request)
let products
try {
  const snapshot = await productsRef
    .orderBy('created_at', 'desc')
    .limit(5)
    .get()

  products = snapshot.docs.map((doc) => ({
    name: doc.data().name,
    price: doc.data().price,
    created_at: doc.data().created_at,
    imageUrl: doc.data().imageUrl,
  })) as ProductT[]
} catch (error) {
  products = undefined
}
---

<Layout>
  <h1>Dashboard</h1>
  <p>Welcome {user?.displayName}</p>
  <form action="/api/auth/logout">
    <button type="submit">Logout</button>
  </form>

  <ul>
    {
      products ? (
        products.map((product) => (
          <li>
            <div>
              <h2>{product.name}</h2>
              <img src={product.imageUrl} alt={product.name} />
            </div>
          </li>
        ))
      ) : (
        <p>No products!</p>
      )
    }
  </ul>

  <h2>Add product</h2>
  <form method="post" enctype="multipart/form-data">
    {actionData.formError && <p>{actionData.formError}</p>}
    <label for="name">Name</label>
    <input
      type="text"
      name="name"
      id="name"
      required
      value={actionData.fields?.name || ''}
    />
    {actionData.fieldsError?.name && <p>{actionData.fieldsError.name}</p>}
    <br />
    <label for="price">Price</label>
    <input
      type="number"
      name="price"
      id="price"
      required
      min="0"
      step="0.1"
      value={actionData.fields?.price || ''}
    />
    {actionData.fieldsError?.price && <p>{actionData.fieldsError.price}</p>}
    <br />
    <label for="product_image" class="btn btn-secondary w-full"
      >Product Image</label
    >
    <input
      type="file"
      name="product_image"
      id="product_image"
      accept=".jpg, .jpeg, .png"
      class="hidden"
    />
    {actionData.fieldsError?.image && <p>{actionData.fieldsError.image}</p>}
    <button type="submit">Add new product</button>
  </form>
</Layout>
