---
import { bucket } from '../../googleCloud/server/cloudStorage'
import { db } from '../../googleCloud/server/firestore'
import Layout from '../../layouts/MainLayout.astro'

type ActionData = {
  formError?: string
  fieldErrors?: {
    name?: string
    price?: string
    image?: string
  }
  fields?: {
    name: string
    price: string
  }
}

const errors: ActionData = {}

const validateProductName = (name: string) => {
  if (name.length < 3) return 'Name is to short!'
}
const validateProductPrice = (price: string) => {
  if (Number.isNaN(parseFloat(price)))
    return 'Please enter valid price in this format 34.44'
  if (parseFloat(price) <= 0) return 'Add valid price!'
}

const validateProductImage = (image: File) => {
  const allowedFileTypes = ['image/png', 'image/jpeg']

  if (image.size === 0) return 'No image selected.'
  if (!allowedFileTypes.includes(image.type))
    return 'Only png, jpg, jpeg images is alloved!'

  if (image.size > 1e6) return 'Max size of image is 1Mb!'
}

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData()
    const name = formData.get('name')
    const price = formData.get('price')
    const image = formData.get('product_image') as File

    if (typeof name !== 'string' || typeof price !== 'string') throw new Error()

    const fieldErrors = {
      name: validateProductName(name),
      price: validateProductPrice(price),
      image: validateProductImage(image),
    }
    const fields = {
      name,
      price,
    }

    if (Object.values(fieldErrors).some(Boolean)) {
      errors.fieldErrors = fieldErrors
      errors.fields = fields
      throw new Error('Please enter valid data.')
    }

    // save image and get link
    const file = bucket.file(`${Date.now()}_${image.name}`)
    await file.save(Buffer.from(await image.arrayBuffer()))
    await file.makePublic()
    const imageUrl = file.publicUrl()

    // save to db
    const productsRef = db.collection('products')
    await productsRef.add({
      name,
      price: parseFloat(price),
      imageUrl,
    })

    return Astro.redirect('/products')
  } catch (error) {
    if (error instanceof Error) {
      errors.formError = error.message ? error.message : 'Form submitet wrong.'
    }
  }
}
---

<Layout>
  <main class="container mx-auto mt-16">
    <h1 class="text-center text-2xl">Add new product</h1>
    <form
      method="POST"
      enctype="multipart/form-data"
      class="space-y-2 w-56 mx-auto"
    >
      {errors?.formError && <p class="text-rose-600">{errors.formError}</p>}
      <label for="name" class="form-label">Name</label>
      <input
        type="text"
        class:list={[
          'form-input',
          { 'border-rose-600 text-rose-600': errors?.fieldErrors?.name },
        ]}
        id="name"
        name="name"
        placeholder="Product name"
        value={errors?.fields?.name}
      />
      {
        errors?.fieldErrors?.name && (
          <p class="text-rose-600">{errors.fieldErrors.name}</p>
        )
      }
      <label for="price" class="form-label">Price</label>
      <input
        type="number"
        id="price"
        class:list={[
          'form-input',
          { 'border-rose-600 text-rose-600': errors?.fieldErrors?.price },
        ]}
        name="price"
        placeholder="34.45"
        step="0.01"
        min="0.01"
        value={errors?.fields?.price || '0.00'}
      />
      {
        errors?.fieldErrors?.price && (
          <p class="text-rose-600">{errors.fieldErrors.price}</p>
        )
      }

      <label for="product_image">Chose image</label>
      <input
        type="file"
        name="product_image"
        id="product_image"
        accept=".jpg, .jpeg, .png"
      />
      {
        errors?.fieldErrors?.image && (
          <p class="text-rose-600">{errors.fieldErrors.image}</p>
        )
      }

      <button type="submit" class="btn btn-primary">Add product</button>
    </form>
  </main>
</Layout>
