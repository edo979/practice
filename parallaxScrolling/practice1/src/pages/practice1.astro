---
import Layout from '../layouts/Layout.astro'
---

<Layout title="Practice 1">
  <main class="relative">
    <div class="images">
      <img src="/images/img-1.png" id="img-1" data-img />
      <img src="/images/img-2.png" id="img-2" data-img />
      <img src="/images/img-3.png" id="img-3" data-img />
    </div>

    <section class="fixed inset-0 z-20 border border-rose-400">
      <img
        src="/images/env-card.png"
        class="sticky top-[33%] left-[50%] w-[34%] translate-y-[var(--translate-env-card-y)] translate-x-[var(--translate-env-card-x)]"
      />
    </section>

    <section
      class="h-screen sticky translate-y-[var(--translate-header)] top-0 md:flex"
    >
      <div class="flex-1 mt-[20%]">
        <header class="px-4 py-12 prose prose-neutral lg:prose-2xl text-center">
          <h1>New practice</h1>
          <p>
            Lorem, ipsum dolor sit amet consectetur adipisicing elit. Deserunt
            dicta id iusto a natus et.
          </p>
        </header>
      </div>

      <aside class="flex-1 bg-zinc-400/[var(--bg-opacity)]"></aside>
      <div data-img-to-show="#img-1"></div>
    </section>

    <section class="h-screen mt-60 relative prose prose-neutral lg:prose-2xl">
      <h1>New practice</h1>
      <p>
        Lorem, ipsum dolor sit amet consectetur adipisicing elit. Deserunt dicta
        id iusto a natus et.
      </p>
      <div data-img-to-show="#img-2" class="mt-64"></div>
    </section>
  </main>
</Layout>

<style>
  /* (oldVal - oldMin) * newRange / (oldRange + newMin) */

  :root {
    --scroll: 0;
    --bg-opacity: calc(1 - (min(var(--scroll), 30) / 30));
    --translate-header: calc(-1% * (max(var(--scroll), 25) - 25) * 100 / 75);
    --translate-env-card-y: calc(
      -1vh * (max(var(--scroll), 15) - 15) * 60 / 42
    );
    --translate-env-card-x: calc(
      -1vh * (max(var(--scroll), 15) - 15) * 40 / 100
    );
  }
</style>

<script>
  window.addEventListener('scroll', setScrollVar)
  setScrollVar()

  function setScrollVar() {
    const htmlEl = document.documentElement,
      scrollPercentage = Math.min(window.scrollY / window.innerHeight, 1) * 100

    htmlEl.style.setProperty('--scroll', scrollPercentage.toString())
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        document
          .querySelectorAll('[data-img]')
          .forEach((image) => image.classList.remove('show'))

        const imageToShowEl = entry.target as HTMLElement
        const image = document.querySelector(imageToShowEl.dataset.imgToShow!)
        image?.classList.add('show')
      }
    })
  })

  document
    .querySelectorAll('[data-img-to-show]')
    .forEach((el) => observer.observe(el))
</script>
