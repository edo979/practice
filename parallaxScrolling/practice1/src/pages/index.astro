---
import Layout from '../layouts/Layout.astro'
---

<Layout title="Welcome to Astro.">
	<main class="relative">
		<div class="images">
			<img src="/images/img-1.png" id="img-1" data-img class="show" />
			<img src="/images/img-2.png" id="img-2" data-img />
			<img src="/images/img-3.png" id="img-3" data-img />
		</div>

		<section
			class="full-screen-section p-0 sticky top-0 flex flex-col translate-y-[var(--top-section-translate)] md:flex-row"
		>
			<div
				class="mx-auto p-4 flex-1 prose prose-neutral bg-white/[var(--background-opacity)] md:prose-2xl"
			>
				<h1>Build Better Backends</h1>
				<p>
					The only platform that gives AI the ability to autonomously build web
					services.
				</p>
			</div>
			<div
				class="hidden bg-neutral-400/[var(--background-opacity)] md:flex-1 md:block"
			>
			</div>
		</section>

		<section
			class="full-screen-section pt-[10vh] prose prose-neutral md:prose-2xl"
		>
			<h1>Completely Visual</h1>
			<p>Never touch the command line, from provision to production.</p>
			<div data-img-to-show="#img-1"></div>
		</section>

		<section class="full-screen-section prose prose-neutral md:prose-2xl">
			<h1>Full Stack</h1>
			<p>
				Never manage infrastructure again. One click gets you: a database, APIs,
				deployments, hosting, etc.
			</p>
			<div data-img-to-show="#img-2"></div>
		</section>

		<section class="full-screen-section prose prose-neutral md:prose-2xl">
			<h1>Launch Faster</h1>
			<p>Logical can get systems to market in minutes instead of weeks.</p>
			<div data-img-to-show="#img-3"></div>
		</section>
	</main>
</Layout>

<script>
	// (oldVal - oldMin) * newRange / oldRange + newMin
	window.addEventListener('scroll', setScrollVar)

	function setScrollVar() {
		const htmlEl = document.documentElement,
			scrollPercentage = (htmlEl.scrollTop / htmlEl.clientHeight) * 100
		console.log(scrollPercentage)
		htmlEl.style.setProperty(
			'--scroll',
			Math.min(scrollPercentage, 100).toString()
		)
	}

	setScrollVar()

	const observer = new IntersectionObserver((entries) => {
		for (let i = entries.length - 1; i >= 0; i--) {
			const entry = entries[i]

			if (entry.isIntersecting) {
				document
					.querySelectorAll('[data-img]')
					.forEach((img) => img.classList.remove('show'))

				const imgToShowEl = entry.target as HTMLElement
				const img = document.querySelector(imgToShowEl.dataset.imgToShow!)
				img?.classList.add('show')
				break
			}
		}
	})

	document
		.querySelectorAll('[data-img-to-show]')
		.forEach((el) => observer.observe(el))
</script>
